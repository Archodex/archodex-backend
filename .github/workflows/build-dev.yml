name: Build Server Development Container Images

on:
  workflow_dispatch: {}
  push:
    branches:
      - main

env:
  ACT: false
  AWS_PAGER: ""
  OCI_REPO: ""

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    strategy:
      matrix:
        arch: [aarch64, x86_64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install mold
        uses: rui314/setup-mold@v1

      - name: Install development packages
        run: |-
          # Skip installing package docs to improve GHA ubuntu times
          sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc > /dev/null << 'EOF'
          path-exclude /usr/share/doc/*
          path-exclude /usr/share/man/*
          path-exclude /usr/share/info/*
          EOF

          sudo apt-get update
          sudo apt-get install -y --no-install-recommends clang protobuf-compiler

      - name: Install Rust toolchain
        uses: moonrepo/setup-rust@v1
        with:
          targets: ${{ matrix.arch }}-unknown-linux-musl
          cache-target: target-${{ matrix.arch }}
          target-dirs: .

      - name: Install musl toolchain
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.arch }}-unknown-linux-musl

      - name: Build Server package
        run: |-
          cargo build \
            --release \
            --target-dir target-${{ matrix.arch }} \
            --target ${{ matrix.arch }}-unknown-linux-musl \
            --package server

      - name: Container metadata
        if: env.ACT != 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Log in to the GitHub Container Registry
        if: env.ACT != 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Calculate OCI image repo
        id: repo
        run: echo "OCI_REPO=ghcr.io/${GITHUB_REPOSITORY@L}" >> $GITHUB_ENV

      - name: Build and push container images
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/${{ matrix.arch }}
          tags: ${{ env.OCI_REPO }}
          labels: ${{ env.ACT != 'true' && steps.meta.outputs.labels }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=${{ env.ACT != 'true' }}

      - name: Image digest
        run: |-
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.arch }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  publish:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to Docker Hub
        if: env.ACT != 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for container images
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: type=ref,event=branch,prefix=branch-

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          OCI_REPO=ghcr.io/${GITHUB_REPOSITORY@L}
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf "${OCI_REPO}@sha256:%s " *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ steps.meta.outputs.tags }}