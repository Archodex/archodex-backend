AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31

Parameters:
  EnvironmentOrganizationPath:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Organizational path for the environment
    Default: /environment_organization_path
  CustomerDataOUId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Organizational Unit ID for customer data accounts
    Default: /customer_data_ou_id
  CustomerDataRegions:
    Type: AWS::SSM::Parameter::Value<List<String>>
    Description: Regions where customer accounts may be provisioned
    Default: /customer_data_regions
  APIBootstrapMD5Sum:
    Type: String
    Description: MD5 checksum of the Lambda API function zip package

Mappings:
  Constants:
    Auth:
      RefreshTokenValidityInDays: 1

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AutoVerifiedAttributes:
        - email
      DeletionProtection: ACTIVE
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA
      MfaConfiguration: OPTIONAL
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireNumbers: false
          RequireUppercase: false
          RequireLowercase: false
          RequireSymbols: false
        SignInPolicy:
          AllowedFirstAuthFactors:
            - PASSWORD
            - WEB_AUTHN
      Schema:
        - AttributeDataType: Number
          Mutable: true
          Name: account_id
          NumberAttributeConstraints:
            MaxValue: 9999999999
            MinValue: 1000000000
        - AttributeDataType: String
          Name: endpoint
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
          - email
      UserPoolName: archodex
      UserPoolTier: ESSENTIALS
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_LINK
      WebAuthnUserVerification: required

  CognitoUserPoolAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - openid
        - profile
      CallbackURLs:
        - !Sub https://api.${AWS::Region}.{{resolve:ssm:/account_subdomain/domain}}/oauth2/idpresponse
        - http://localhost:5731/oauth2/idpresponse
      ClientName: app
      DefaultRedirectURI: !Sub https://api.${AWS::Region}.{{resolve:ssm:/account_subdomain/domain}}/oauth2/idpresponse
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_AUTH
      PreventUserExistenceErrors: ENABLED
      ReadAttributes:
        - custom:endpoint
      RefreshTokenValidity: !FindInMap
        - Constants
        - Auth
        - RefreshTokenValidityInDays
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref CognitoUserPool
      WriteAttributes:
        - email

  CognitoUserPoolManagedLoginBranding:
    Type: AWS::Cognito::ManagedLoginBranding
    Properties:
      ClientId: !Ref CognitoUserPoolAppClient
      Settings:
        categories:
          global:
            colorSchemeMode: DYNAMIC
            spacingDensity: CONDENSED
      UserPoolId: !Ref CognitoUserPool

  USEast1StackSetExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ArchodexBackendUSEast1StackSetExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CrossRegionParameterCustomResourcesAdministratorAccess
      Policies:
        - PolicyName: ManageStacks
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:CancelUpdateStack
                  - cloudformation:ContinueUpdateRollback
                  - cloudformation:CreateChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:RollbackStack
                  - cloudformation:TagResource
                  - cloudformation:UntagResource
                  - cloudformation:UpdateStack
                Resource: !Sub arn:${AWS::Partition}:cloudformation:*:${AWS::AccountId}:stack/StackSet-${AWS::StackName}-us-east-1-*
        - PolicyName: ReadCrossRegionParameterCustomResourceTokenParameter
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: ssm:GetParameters
                Resource: !Sub arn:${AWS::Partition}:ssm:*:${AWS::AccountId}:parameter/cross_region_parameter_custom_resource_service_token
        - PolicyName: ManageCognitoACMCertificate
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - acm:AddTagsToCertificate
                  - acm:DeleteCertificate
                  - acm:DescribeCertificate
                  - acm:ListTagsForCertificate
                  - acm:RemoveTagsFromCertificate
                  - acm:RequestCertificate
                  - acm:UpdateCertificateOptions
                Resource: "*"
                Condition:
                  ForAllValues:StringEquals:
                    acm:DomainNames: auth.{{resolve:ssm:/account_subdomain/domain}}
        - PolicyName: ManageCognitoACMRoute53Record
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                Resource: !Sub arn:${AWS::Partition}:route53:::hostedzone/{{resolve:ssm:/account_subdomain/hosted_zone_id}}
                Condition:
                  ForAllValues:StringLike:
                    route53:ResourceRecordSet: "*.auth.{{resolve:ssm:/account_subdomain/domain}}"
                  ForAllValues:StringEquals:
                    route53:ResourceRecordSetType: CNAME

  USEast1StackSetAdministrationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ArchodexBackendUSEast1StackSetAdministrationRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub cloudformation.${AWS::URLSuffix}
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              StringLike:
                aws:SourceArn: !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stackset/${AWS::StackName}-us-east-1:*
      Policies:
        - PolicyName: ExecuteStackSet
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: !GetAtt USEast1StackSetExecutionRole.Arn

  CrossRegionArchodexEnvironmentStacks:
    Type: AWS::CloudFormation::StackSet
    Properties:
      AdministrationRoleARN: !GetAtt USEast1StackSetAdministrationRole.Arn
      ExecutionRoleName: !Ref USEast1StackSetExecutionRole
      ManagedExecution:
        Active: true
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 1
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: ParentStackName
          ParameterValue: !Ref AWS::StackName
        - ParameterKey: ParentStackRegion
          ParameterValue: !Ref AWS::Region
        - ParameterKey: Domain
          ParameterValue: "{{resolve:ssm:/account_subdomain/domain}}"
        - ParameterKey: HostedZoneId
          ParameterValue: "{{resolve:ssm:/account_subdomain/hosted_zone_id}}"
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref AWS::AccountId
          Regions:
            - us-east-1
      StackSetName: !Sub ${AWS::StackName}-us-east-1
      TemplateBody: |-
        Parameters:
          ParentStackName:
            Type: String
            Description: Parent stack name
          ParentStackRegion:
            Type: String
            Description: Parent stack region
          Domain:
            Type: String
            Description: Archodex environment domain name
          HostedZoneId:
            Type: String
            Description: Archodex environment Route53 Hosted Zone ID

        Resources:
          CognitoDomainCertificate:
            Type: AWS::CertificateManager::Certificate
            Properties:
              DomainName: !Sub auth.${Domain}
              ValidationMethod: DNS
              DomainValidationOptions:
                - DomainName: !Sub auth.${Domain}
                  HostedZoneId: !Ref HostedZoneId

          CognitoDomainCertificateParameter:
            Type: Custom::CrossRegionSSMParameter
            Properties:
              # Use unicode character escape to prevent parent stack dynamic referencing
              ServiceToken: "{\u007Bresolve:ssm:/cross_region_parameter_custom_resource_service_token}}"
              ServiceTimeout: 10
              Region: !Ref ParentStackRegion
              Description: Archodex Cognito Domain us-east-1 ACM Certificate ARN
              Name: !Sub /${ParentStackName}/cognito_domain_certificate
              Type: String
              Value: !Ref CognitoDomainCertificate

  CognitoUserPoolDomain:
    DependsOn: CrossRegionArchodexEnvironmentStacks
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      CustomDomainConfig:
        CertificateArn: "{{resolve:ssm:/archodex-backend/cognito_domain_certificate}}"
      Domain: auth.{{resolve:ssm:/account_subdomain/domain}}
      ManagedLoginVersion: 2
      UserPoolId: !Ref CognitoUserPool

  CognitoUserPoolDomainDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: "{{resolve:ssm:/account_subdomain/hosted_zone_id}}"
      Name: auth.{{resolve:ssm:/account_subdomain/domain}}
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !GetAtt CognitoUserPoolDomain.CloudFrontDistribution

  AccountsGlobalTable:
    Type: AWS::DynamoDB::GlobalTable
    Properties:
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: B
        - AttributeName: sk
          AttributeType: B
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      Replicas:
        - DeletionProtectionEnabled: true
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
          Region: !Ref AWS::Region
          SSESpecification:
            KMSMasterKeyId: alias/ArchodexBackendCustomerDataKey
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: archodex-accounts

  AccountsReplicaTableCustomResourceHandler:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - arm64
      Description: Cloudformation Custom Resource handler for managing regional replicas of the accounts global table
      Environment:
        Variables:
          ACCOUNTS_GLOBAL_TABLE_NAME: !Ref AccountsGlobalTable
      FunctionName: !Sub ${AWS::StackName}-accounts-replica-table-custom-resource-handler
      Handler: index.handler
      InlineCode: |-
        const { DynamoDBClient, UpdateTableCommand } = require('@aws-sdk/client-dynamodb');
        const https = require('https');

        const client = new DynamoDBClient();

        const isConfigurationEqual = (conf1, conf2) => Object.keys(conf1)
          .concat(Object.keys(conf2))
          .every(key => conf1[key] === conf2[key]);

        module.exports.handler = async (event) => {
          console.log(JSON.stringify(event, null, 2));

          const replicaUpdates = [];

          if (typeof event.ResourceProperties.Replicas === 'object') {
            delete event.ResourceProperties.Replicas[process.env.AWS_REGION];
          } else {
            return sendResponse(event, 'FAILED', 'Replicas property must be a map of region names to replica configurations');
          }

          if (event.RequestType === 'Create') {
            for (const [region, configuration] of Object.entries(event.ResourceProperties.Replicas)) {
              replicaUpdates.push({
                Create: {
                  RegionName: region,
                  ...configuration,
                }
              });
            }
          } else if (event.RequestType === 'Update') {
            if (typeof event.OldResourceProperties.Replicas === 'object') {
              delete event.OldResourceProperties.Replicas[process.env.AWS_REGION];
            }

            for (const [region, configuration] of Object.entries(event.ResourceProperties.Replicas)) {
              if (region in event.OldResourceProperties.Replicas) {
                if (!isConfigurationEqual(configuration, event.OldResourceProperties.Replicas[region])) {
                  replicaUpdates.push({
                    Update: {
                      RegionName: region,
                      ...configuration,
                    }
                  });
                }
              } else {
                replicaUpdates.push({
                  Create: {
                    RegionName: region,
                    ...configuration,
                  }
                });
              }
            }

            for (const region in event.OldResourceProperties.Replicas) {
              if (!(region in event.ResourceProperties.Replicas)) {
                replicaUpdates.push({
                  Delete: {
                    RegionName: region,
                  }
                });
              }
            }
          } else if (event.RequestType === 'Delete') {
            for (const region in event.ResourceProperties.Replicas) {
              replicaUpdates.push({
                Delete: {
                  RegionName: region,
                }
              });
            }
          }

          console.log('Replica Updates: ' + JSON.stringify(replicaUpdates, null, 2));

          if (replicaUpdates.length === 0) {
            return sendResponse(event, 'SUCCESS');
          }

          try {
            const params = {
              TableName: process.env.ACCOUNTS_GLOBAL_TABLE_NAME,
              ReplicaUpdates: replicaUpdates,
            };

            const command = new UpdateTableCommand(params);
            await client.send(command);

            console.log('Table updated successfully');

            return sendResponse(event, 'SUCCESS');
          } catch (error) {
            console.error('Table update failed');
            console.error(error);
            return sendResponse(event, 'FAILED', error.message);
          }
        };

        const sendResponse = (event, status, reason) => {
          const responseBody = JSON.stringify({
            Status: status,
            Reason: reason || `See CloudWatch Log Stream: ${process.env.AWS_LAMBDA_LOG_STREAM_NAME}`,
            PhysicalResourceId: event.PhysicalResourceId || process.env.ACCOUNTS_GLOBAL_TABLE_NAME,
            StackId: event.StackId,
            RequestId: event.RequestId,
            LogicalResourceId: event.LogicalResourceId,
          });

          const options = {
            method: 'PUT',
            headers: {
              'Content-Type': '',
              'Content-Length': responseBody.length,
            },
          };

          return new Promise((resolve, reject) => {
            const request = https.request(event.ResponseURL, options, response => {
              console.log(`CloudFormation Response status code: ${response.statusCode}`);

              response.on('data', () => {});
              response.on('end', resolve);
            });

            request.on('error', reject);
            request.write(responseBody);
            request.end();
          });
        };
      Policies:
        - Statement:
            - Effect: Allow
              Action: dynamodb:UpdateTable
              Resource: !GetAtt AccountsGlobalTable.Arn
            - Effect: Allow
              Action:
                - dynamodb:BatchWriteItem
                - dynamodb:CreateTable
                - dynamodb:CreateTableReplica
                - dynamodb:DeleteItem
                - dynamodb:DeleteTable
                - dynamodb:DeleteTableReplica
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:UpdateItem
                - dynamodb:UpdateTimeToLive
              Resource: !Sub arn:${AWS::Partition}:dynamodb:*:${AWS::AccountId}:table/${AccountsGlobalTable}
            - Effect: Allow
              Action:
                - kms:CreateGrant
                - kms:Decrypt
                - kms:DescribeKey
                - kms:Encrypt
                - kms:RevokeGrant
              Resource: "*"
              Condition:
                StringEquals:
                  aws:CalledViaLast: !Sub dynamodb.${AWS::URLSuffix}
      Runtime: nodejs22.x
      Timeout: 29
      Tracing: Active

  AccountsReplicaTableCustomResourceHandlerLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AccountsReplicaTableCustomResourceHandler}

  AccountsReplicaTables:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AccountsReplicaTableCustomResourceHandler.Arn
      ServiceTimeout: 30
      Replicas:
        Fn::ForEach::AccountsTableReplicaRegion:
          - Region
          - !Ref CustomerDataRegions
          - ${Region}:
              KMSMasterKeyId: alias/ArchodexBackendCustomerDataKey

  APIRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub lambda.${AWS::URLSuffix}
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
            Action: sts:AssumeRole
            Condition:
              ArnLike:
                aws:PrincipalArn: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/aws-reserved/sso.amazonaws.com/us-west-2/AWSReservedSSO_AdministratorAccess_*
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: GetCognitoUserAttributes
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: cognito-idp:AdminGetUser
                Resource: !GetAtt CognitoUserPool.Arn
        - PolicyName: CreateCustomerTables
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:CreateTable
                  - dynamodb:DescribeTable
                  - dynamodb:UpdateContinuousBackups
                Resource: !Sub arn:${AWS::Partition}:dynamodb:*:${AWS::AccountId}:table/archodex-service-data-*
        - PolicyName: ReadWriteAccountAndCustomerTables
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:ConditionCheckItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub arn:${AWS::Partition}:dynamodb:*:${AWS::AccountId}:table/${AccountsGlobalTable}
                  - !Sub arn:${AWS::Partition}:dynamodb:*:${AWS::AccountId}:table/archodex-service-data-*
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                Resource: "*"
                Condition:
                  StringEquals:
                    aws:CalledViaLast: !Sub dynamodb.${AWS::URLSuffix}
        - PolicyName: ListCustomerDataAccounts
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: organizations:ListAccountsForParent
                Resource: !Sub arn:${AWS::Partition}:organizations::*:ou/*/${CustomerDataOUId}
        - PolicyName: GetCustomerDataAccountTableCounts
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: cloudwatch:GetMetricData
                Resource: "*"
        - PolicyName: AssumeBackendAPICustomerDataManagementRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: !Sub arn:${AWS::Partition}:iam::*:role/BackendAPICustomerDataManagementRole
                Condition:
                  ForAnyValue:StringEquals:
                    aws:ResourceOrgPaths: !Sub ${EnvironmentOrganizationPath}/${CustomerDataOUId}/
        - PolicyName: UseAPIKeyCustomerDataKey
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: ssm:GetParameter
                Resource: !Sub arn:${AWS::Partition}:ssm:*:${AWS::AccountId}:parameter/api_key_customer_data_key
              - Effect: Allow
                Action: kms:Decrypt
                Resource: "*"
                Condition:
                  ForAnyValue:StringEquals:
                    kms:ResourceAliases: alias/ArchodexBackendCustomerDataKey
                  StringEquals:
                    kms:EncryptionContext:Purpose: APIKeys
                  ForAllValues:StringEquals:
                    kms:EncryptionContextKeys: Purpose
      RoleName: ArchodexBackendAPIRole

  RegionalBackendsStackSetExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: RegionalBackendsStackSetExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ManageStacks
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:CancelUpdateStack
                  - cloudformation:ContinueUpdateRollback
                  - cloudformation:CreateChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:RollbackStack
                  - cloudformation:TagResource
                  - cloudformation:UntagResource
                  - cloudformation:UpdateStack
                Resource:
                  - !Sub arn:${AWS::Partition}:cloudformation:*:${AWS::AccountId}:stack/StackSet-${AWS::StackName}-regional-backends-*
                  - !Sub arn:${AWS::Partition}:cloudformation:*:aws:transform/Serverless-2016-10-31
        - PolicyName: UseCustomerDataKMSKey
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kms:CreateGrant
                  - kms:RevokeGrant
                Resource: "*"
                Condition:
                  Bool:
                    kms:GrantIsForAWSResource: true
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                Resource: "*"
                Condition:
                  StringEquals:
                    kms:RequestAlias: alias/ArchodexBackendCustomerDataKey
        - PolicyName: ManageAPIFunction
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:AddPermission
                  - lambda:CreateFunction
                  - lambda:DeleteFunction
                  - lambda:GetFunction
                  - lambda:GetFunctionConfiguration
                  - lambda:GetPolicy
                  - lambda:ListTags
                  - lambda:RemovePermission
                  - lambda:TagResource
                  - lambda:UntagResource
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                Resource: !Sub arn:${AWS::Partition}:lambda:*:${AWS::AccountId}:function:archodex-backend-api
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Sub arn:${AWS::Partition}:s3:::cloudformation-deployment-assets-${AWS::AccountId}-*/backend/api/bootstrap-*.zip
              - Effect: Allow
                Action: iam:PassRole
                Resource: !GetAtt APIRole.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DeleteLogGroup
                  - logs:DeleteRetentionPolicy
                  - logs:PutRetentionPolicy
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:/aws/lambda/archodex-backend-api
                  - !Sub arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:/aws/lambda/archodex-backend-api:*
        - PolicyName: ManageAPIACMCertificate
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - acm:AddTagsToCertificate
                  - acm:DeleteCertificate
                  - acm:DescribeCertificate
                  - acm:ListTagsForCertificate
                  - acm:RemoveTagsFromCertificate
                  - acm:RequestCertificate
                  - acm:UpdateCertificateOptions
                Resource: "*"
                Condition:
                  ForAllValues:StringLike:
                    acm:DomainNames: api.*.{{resolve:ssm:/account_subdomain/domain}}
        - PolicyName: ManageAPIRoute53Records
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: ManageACMDNSVerificationRecords
                Effect: Allow
                Action: route53:ChangeResourceRecordSets
                Resource: !Sub arn:${AWS::Partition}:route53:::hostedzone/{{resolve:ssm:/account_subdomain/hosted_zone_id}}
                Condition:
                  ForAllValues:StringLike:
                    route53:ResourceRecordSet: "*.api.*.{{resolve:ssm:/account_subdomain/domain}}"
                  ForAllValues:StringEquals:
                    route53:ResourceRecordSetType: CNAME
              - Sid: GetHostedZoneForAPIGatewayDomain
                Effect: Allow
                Action: route53:GetHostedZone
                Resource: !Sub arn:${AWS::Partition}:route53:::hostedzone/{{resolve:ssm:/account_subdomain/hosted_zone_id}}
              - Sid: GetChangeStatusForAPIGatewayDomain
                Effect: Allow
                Action: route53:GetChange
                Resource: !Sub arn:${AWS::Partition}:route53:::change/*
              - Sid: ManageAPICustomDomainRecords
                Effect: Allow
                Action: route53:ChangeResourceRecordSets
                Resource: !Sub arn:${AWS::Partition}:route53:::hostedzone/{{resolve:ssm:/account_subdomain/hosted_zone_id}}
                Condition:
                  ForAllValues:StringLike:
                    route53:ResourceRecordSet: "api.*.{{resolve:ssm:/account_subdomain/domain}}"
                  ForAllValues:StringEquals:
                    route53:ResourceRecordSetType: A
        - PolicyName: ManageApiGateway
          PolicyDocument:
            Version: "2012-10-17"
            # REST APIs are impossible to scope permissions for, so we have to allow all actions
            Statement:
              - Effect: Allow
                Action: apigateway:*
                Resource: "*"

  RegionalBackendsStackSetAdministrationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: RegionalBackendsStackSetAdministrationRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub cloudformation.${AWS::URLSuffix}
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              StringLike:
                aws:SourceArn: !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stackset/${AWS::StackName}-regional-backends:*
      Policies:
        - PolicyName: ExecuteStackSet
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: !GetAtt RegionalBackendsStackSetExecutionRole.Arn

  RegionalBackendsStacks:
    Type: AWS::CloudFormation::StackSet
    Properties:
      AdministrationRoleARN: !GetAtt RegionalBackendsStackSetAdministrationRole.Arn
      Capabilities:
        - CAPABILITY_AUTO_EXPAND
      ExecutionRoleName: !Ref RegionalBackendsStackSetExecutionRole
      ManagedExecution:
        Active: true
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 1
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: Domain
          ParameterValue: "{{resolve:ssm:/account_subdomain/domain}}"
        - ParameterKey: HostedZoneId
          ParameterValue: "{{resolve:ssm:/account_subdomain/hosted_zone_id}}"
        - ParameterKey: APIRoleArn
          ParameterValue: !GetAtt APIRole.Arn
        - ParameterKey: APIBootstrapMD5Sum
          ParameterValue: !Ref APIBootstrapMD5Sum
        - ParameterKey: CognitoUserPoolId
          ParameterValue: !Ref CognitoUserPool
        - ParameterKey: CognitoUserPoolAppClientId
          ParameterValue: !Ref CognitoUserPoolAppClient
        - ParameterKey: CognitoRefreshTokenValidityInDays
          ParameterValue: !FindInMap
            - Constants
            - Auth
            - RefreshTokenValidityInDays
        - ParameterKey: CustomerDataOUId
          ParameterValue: !Ref CustomerDataOUId
      PermissionModel: SELF_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref AWS::AccountId
          Regions: !Ref CustomerDataRegions
      StackSetName: !Sub ${AWS::StackName}-regional-backends
      TemplateBody: |-
        Transform: AWS::Serverless-2016-10-31

        Parameters:
          Domain:
            Type: String
            Description: Archodex environment domain name
          HostedZoneId:
            Type: String
            Description: Archodex environment Route53 Hosted Zone ID
          APIRoleArn:
            Type: String
            Description: API Lambda Function IAM Role ARN
          APIBootstrapMD5Sum:
            Type: String
            Description: MD5 checksum of the Lambda API function zip package
          CognitoUserPoolId:
            Type: String
            Description: Cognito User Pool ID
          CognitoUserPoolAppClientId:
            Type: String
            Description: Cognito User Pool App Client ID
          CognitoRefreshTokenValidityInDays:
            Type: Number
            Description: Number of days a refresh token is valid for
          CustomerDataOUId:
            Type: String
            Description: Organizational Unit ID for customer data accounts

        Resources:
          API:
            Type: AWS::Lambda::Function
            Properties:
              Architectures:
                - arm64
              Code:
                S3Bucket: !Sub cloudformation-deployment-assets-${AWS::AccountId}-${AWS::Region}
                S3Key: !Sub backend/api/bootstrap-${APIBootstrapMD5Sum}.zip
              FunctionName: archodex-backend-api
              Environment:
                Variables:
                  AWS_PARTITION: !Ref AWS::Partition
                  AWS_ACCOUNT_ID: !Ref AWS::AccountId
                  ENDPOINT: !Sub https://api.${AWS::Region}.${Domain}
                  COGNITO_AUTH_ENDPOINT: !Sub https://auth.${Domain}
                  COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
                  COGNITO_CLIENT_ID: !Ref CognitoUserPoolAppClientId
                  COGNITO_REDIRECT_URI: !Sub https://api.${AWS::Region}.${Domain}/oauth2/idpresponse
                  COGNITO_REFRESH_TOKEN_VALIDITY_IN_DAYS: !Ref CognitoRefreshTokenValidityInDays
                  COGNITO_ISSUER_ENDPOINT: !Sub https://cognito-idp.${AWS::Region}.${AWS::URLSuffix}
                  APP_REDIRECT_URI: !Sub https://app.${Domain}/oauth2/idpresponse
                  CUSTOMER_DATA_OU_ID: !Ref CustomerDataOUId
              Handler: bootstrap
              MemorySize: 3008
              Role: !Ref APIRoleArn
              Runtime: provided.al2023
              Timeout: 30
              TracingConfig:
                Mode: Active
          
          APIRESTAPIANYproxyPermissionProd:
            Type: AWS::Lambda::Permission
            Properties:
              Action: lambda:InvokeFunction
              FunctionName: !Ref API
              Principal: !Sub apigateway.${AWS::URLSuffix}
              SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${RESTAPI}/Prod/*/*
          
          APILogGroup:
            Type: AWS::Logs::LogGroup
            DeletionPolicy: Retain
            Properties:
              LogGroupName: !Sub /aws/lambda/${API}
              RetentionInDays: 30

          RESTAPICertificate:
            Type: AWS::CertificateManager::Certificate
            Properties:
              DomainName: !Sub api.${AWS::Region}.${Domain}
              ValidationMethod: DNS
              DomainValidationOptions:
                - DomainName: !Sub api.${AWS::Region}.${Domain}
                  HostedZoneId: !Ref HostedZoneId

          RESTAPI:
            Type: AWS::Serverless::Api
            Properties:
              Name: archodex-backend-api
              StageName: Prod
              DefinitionBody:
                openapi: 3.0.1
                info:
                  title: archodex-backend-api
                  version: 1
                servers:
                  - url: !Sub https://api.${AWS::Region}.${Domain}
                    x-amazon-apigateway-endpoint-configuration:
                      disableExecuteApiEndpoint: true
                paths:
                  /{proxy+}:
                    x-amazon-apigateway-any-method:
                      x-amazon-apigateway-integration:
                        httpMethod: POST
                        type: aws_proxy
                        uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${API.Arn}/invocations
                      responses: {}
              DisableExecuteApiEndpoint: true
              Domain:
                DomainName: !Sub api.${AWS::Region}.${Domain}
                CertificateArn: !Ref RESTAPICertificate
                Route53:
                  HostedZoneId: !Ref HostedZoneId
              EndpointConfiguration: REGIONAL
              FailOnWarnings: true
              TracingEnabled: true
